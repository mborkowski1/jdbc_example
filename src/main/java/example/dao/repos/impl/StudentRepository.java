package example.dao.repos.impl;

import example.dao.mappers.IMapper;
import example.dao.mappers.StudentMapper;
import example.dao.repos.IStudentRepository;
import example.dao.uow.IUnitOfWork;
import example.domain.Gender;
import example.domain.Student;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class StudentRepository extends RepositoryBase<Student> implements IStudentRepository
{

    String selectByFirstNameSql = "SELECT * FROM student WHERE first_name=?";
    String selectByLastNameSql = "SELECT * FROM student WHERE last_name=?";
    String selectByAgeSql = "SELECT * FROM student WHERE age BETWEEN ? AND ?";
    String selectByGenderSql = "SELECT * FROM student WHERE gender=?";
    PreparedStatement selectByFirstName;
    PreparedStatement selectByLastName;
    PreparedStatement selectByAge;
    PreparedStatement selectByGender;

    public StudentRepository(Connection connection, IMapper<Student> mapper, IUnitOfWork uow) throws SQLException
    {
        super(connection, mapper , uow);
        selectByFirstName = connection.prepareStatement(selectByFirstNameSql);
        selectByLastName = connection.prepareStatement(selectByLastNameSql);
        selectByAge = connection.prepareStatement(selectByAgeSql);
        selectByGender = connection.prepareStatement(selectByGenderSql);
    }

    @Override
    protected String createTableStatementSql()
    {
        return "CREATE TABLE student("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                + "first_name varchar(50),"
                + "last_name varchar(50),"
                + "age bigint,"
                + "pesel varchar(11),"
                + "gender varchar(6),"
                + "phone varchar(9)"
                + ")";
    }

    @Override
    protected String getInsertQuerySql()
    {
        return "INSERT INTO student (first_name, last_name, age, pesel, gender, phone) VALUES (?, ?, ?, ?, ?, ?)";
    }

    @Override
    protected String getUpdateQuerySql()
    {
        return "UPDATE student SET (first_name, last_name, age, pesel, gender, phone) = (?, ?, ?, ?, ?, ?) WHERE id=?";
    }

    @Override
    protected String getTableName()
    {
        return "student";
    }

    @Override
    protected void setInsert(Student student) throws SQLException
    {
        insert.setString(1, student.getFirstName());
        insert.setString(2, student.getLastName());
        insert.setInt(3, student.getAge());
        insert.setString(4, student.getPesel());
        insert.setString(5, String.valueOf(student.getGender()));
        insert.setString(6, student.getPhone());
    }

    @Override
    protected void setUpdate(Student student) throws SQLException
    {
        update.setString(1, student.getFirstName());
        update.setString(2, student.getLastName());
        update.setInt(3, student.getAge());
        update.setString(4, student.getPesel());
        update.setString(5, String.valueOf(student.getGender()));
        update.setString(6, student.getPhone());
        update.setInt(7, student.getId());
    }

    @Override
    public List<Student> selectByFirstName(String firstName)
    {
        List<Student> result = new ArrayList<>();
        try
        {
            selectByFirstName.setString(1, firstName);
            ResultSet resultSet = selectByFirstName.executeQuery();
            while (resultSet.next())
                result.add(mapper.map(resultSet));
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Student> selectByLastName(String lastName)
    {
        List<Student> result = new ArrayList<>();
        try
        {
            selectByLastName.setString(1, lastName);
            ResultSet resultSet = selectByLastName.executeQuery();
            while (resultSet.next())
                result.add(mapper.map(resultSet));
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Student> selectByAge(int fromAge, int toAge)
    {
        List<Student> result = new ArrayList<>();
        try
        {
            selectByAge.setInt(1, fromAge);
            selectByAge.setInt(2, toAge);
            ResultSet resultSet = selectByAge.executeQuery();
            while (resultSet.next())
                result.add(mapper.map(resultSet));
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Student> selectByGender(Gender gender)
    {
        List<Student> result = new ArrayList<>();
        try
        {
            selectByGender.setString(1, String.valueOf(gender));
            ResultSet resultSet = selectByFirstName.executeQuery();
            while (resultSet.next())
                result.add(mapper.map(resultSet));
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return result;
    }

}
