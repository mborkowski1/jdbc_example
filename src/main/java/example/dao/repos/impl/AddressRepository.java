package example.dao.repos.impl;

import example.dao.mappers.AddressMapper;
import example.dao.repos.IAddressRepository;
import example.dao.uow.IUnitOfWork;
import example.domain.Address;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class AddressRepository extends RepositoryBase<Address> implements IAddressRepository
{

    String selectByCitySql = "SELECT * FROM address WHERE city=?";
    String selectByIdStudentSql = "SELECT * FROM address  WHERE id_student=?";
    PreparedStatement selectByCity;
    PreparedStatement selectByIdStudent;

    public AddressRepository(Connection connection, AddressMapper addressMapper, IUnitOfWork uow) throws SQLException
    {
        super(connection, addressMapper, uow);
        selectByCity = connection.prepareStatement(selectByCitySql);
        selectByIdStudent = connection.prepareStatement(selectByIdStudentSql);
    }

    @Override
    protected String createTableStatementSql()
    {
        return "CREATE TABLE address("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                + "street varchar(50),"
                + "city varchar(50),"
                + "house_number varchar(50),"
                + "post_code varchar(50),"
                + "id_student bigint"
                + ")";
    }

    @Override
    protected String getInsertQuerySql()
    {
        return "INSERT INTO address (street, city, house_number, post_code, id_student) VALUES (?, ?, ?, ?, ?)";
    }

    @Override
    protected String getUpdateQuerySql()
    {
        return "UPDATE address SET (street, city, house_number, post_code, id_student) = (?, ?, ?, ?, ?) WHERE id=?";
    }

    @Override
    protected String getTableName()
    {
        return "address";
    }

    @Override
    protected void setInsert(Address address) throws SQLException
    {
        insert.setString(1, address.getStreet());
        insert.setString(2, address.getCity());
        insert.setString(3, address.getHouseNumer());
        insert.setString(4, address.getPostCode());
        insert.setInt(5, address.getIdStudent());
    }

    @Override
    protected void setUpdate(Address address) throws SQLException
    {
        update.setString(1, address.getStreet());
        update.setString(2, address.getCity());
        update.setString(3, address.getHouseNumer());
        update.setString(4, address.getPostCode());
        update.setInt(5, address.getIdStudent());
        update.setInt(6, address.getId());
    }

    @Override
    public List<Address> selectByCity(String city)
    {
        List<Address> result = new ArrayList<>();
        try
        {
            selectByCity.setString(1, city);
            ResultSet resultSet = selectByCity.executeQuery();
            while (resultSet.next())
                result.add(mapper.map(resultSet));
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Address> selectByStudent(int idStudent)

    {
        List<Address> result = new ArrayList<>();
        try
        {
            selectByIdStudent.setInt(1, idStudent);
            ResultSet resultSet = selectByCity.executeQuery();
            while (resultSet.next())
                result.add(mapper.map(resultSet));
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return result;
    }

}
